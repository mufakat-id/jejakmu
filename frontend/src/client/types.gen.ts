// This file is auto-generated by @hey-api/openapi-ts

export type BaseResponse_list_str__ = {
    /**
     * HTTP status code (200, 201, 400, 404, etc.)
     */
    code: number;
    /**
     * Human-readable message describing the operation result
     */
    message: string;
    /**
     * The actual response data. Type varies by endpoint. Can be null for update/delete operations.
     */
    data?: (Array<(string)> | null);
};

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type Body_upload_upload_files = {
    /**
     * Multiple files to upload
     */
    files: Array<((Blob | File))>;
};

export type GoogleAuthRequest = {
    /**
     * Authorization code from Google OAuth
     */
    code: string;
};

export type GoogleAuthResponse = {
    access_token: string;
    token_type?: string;
    user: UserPublic;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type ItemCreate = {
    title: string;
    description?: (string | null);
};

export type ItemPublic = {
    title: string;
    description?: (string | null);
    id: string;
    owner_id: string;
};

export type ItemsPublic = {
    data: Array<ItemPublic>;
    count: number;
};

export type ItemUpdate = {
    title?: (string | null);
    description?: (string | null);
};

export type Message = {
    message: string;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type PrivateUserCreate = {
    email: string;
    password: string;
    full_name: string;
    is_verified?: boolean;
};

export type RoleCreate = {
    /**
     * Role name
     */
    name: string;
    description?: (string | null);
    is_active?: boolean;
};

export type RolePublic = {
    /**
     * Role name
     */
    name: string;
    description?: (string | null);
    is_active?: boolean;
    id: string;
};

export type RolesPublic = {
    data: Array<RolePublic>;
    count: number;
};

export type RoleUpdate = {
    name?: (string | null);
    description?: (string | null);
    is_active?: (boolean | null);
};

/**
 * Schema for creating a new site
 */
export type SiteCreate = {
    /**
     * Backend domain (e.g., api.example.com or localhost:8000)
     */
    domain: string;
    /**
     * Human-readable site name
     */
    name: string;
    /**
     * Frontend domain for redirects (e.g., example.com or localhost:5173)
     */
    frontend_domain: string;
    /**
     * Whether the site is active
     */
    is_active?: boolean;
    /**
     * Whether this is the default site
     */
    is_default?: boolean;
    /**
     * Additional site-specific settings
     */
    settings?: ({
    [key: string]: unknown;
} | null);
};

/**
 * Public schema for Site
 */
export type SitePublic = {
    /**
     * Backend domain (e.g., api.example.com or localhost:8000)
     */
    domain: string;
    /**
     * Human-readable site name
     */
    name: string;
    /**
     * Frontend domain for redirects (e.g., example.com or localhost:5173)
     */
    frontend_domain: string;
    /**
     * Whether the site is active
     */
    is_active?: boolean;
    /**
     * Whether this is the default site
     */
    is_default?: boolean;
    /**
     * Additional site-specific settings
     */
    settings?: ({
    [key: string]: unknown;
} | null);
    id: string;
};

/**
 * Schema for list of sites
 */
export type SitesPublic = {
    data: Array<SitePublic>;
    count: number;
};

/**
 * Schema for updating a site
 */
export type SiteUpdate = {
    domain?: (string | null);
    name?: (string | null);
    frontend_domain?: (string | null);
    is_active?: (boolean | null);
    is_default?: (boolean | null);
    settings?: ({
    [key: string]: unknown;
} | null);
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    full_name?: (string | null);
    password?: (string | null);
    is_superuser?: boolean;
};

export type UserProfileCreate = {
    phone?: (string | null);
    address?: (string | null);
    bio?: (string | null);
    avatar_url?: (string | null);
    date_of_birth?: (string | null);
    city?: (string | null);
    country?: (string | null);
    postal_code?: (string | null);
    user_id: string;
};

export type UserProfilePublic = {
    phone?: (string | null);
    address?: (string | null);
    bio?: (string | null);
    avatar_url?: (string | null);
    date_of_birth?: (string | null);
    city?: (string | null);
    country?: (string | null);
    postal_code?: (string | null);
    id: string;
    user_id: string;
};

export type UserProfilesPublic = {
    data: Array<UserProfilePublic>;
    count: number;
};

export type UserProfileUpdate = {
    phone?: (string | null);
    address?: (string | null);
    bio?: (string | null);
    avatar_url?: (string | null);
    date_of_birth?: (string | null);
    city?: (string | null);
    country?: (string | null);
    postal_code?: (string | null);
};

export type UserProfileWithSites = {
    phone?: (string | null);
    address?: (string | null);
    bio?: (string | null);
    avatar_url?: (string | null);
    date_of_birth?: (string | null);
    city?: (string | null);
    country?: (string | null);
    postal_code?: (string | null);
    id: string;
    user_id: string;
    /**
     * List of associated site IDs
     */
    site_ids?: Array<(string)>;
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    full_name?: (string | null);
    id: string;
    is_superuser: boolean;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: (string | null);
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserUpdate = {
    email?: (string | null);
    is_active?: (boolean | null);
    full_name?: (string | null);
};

export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type FileGetSignedUrlData = {
    /**
     * Number of days until the signed URL expires
     */
    expirationDays?: number;
    /**
     * Public GCS URL to convert to signed URL
     */
    url: string;
};

export type ItemsReadItemsData = {
    limit?: number;
    skip?: number;
};

export type ItemsReadItemsResponse = (ItemsPublic);

export type ItemsCreateItemData = {
    requestBody: ItemCreate;
};

export type ItemsCreateItemResponse = (ItemPublic);

export type ItemsReadItemData = {
    id: string;
};

export type ItemsReadItemResponse = (ItemPublic);

export type ItemsUpdateItemData = {
    id: string;
    requestBody: ItemUpdate;
};

export type ItemsUpdateItemResponse = (ItemPublic);

export type ItemsDeleteItemData = {
    id: string;
};

export type ItemsDeleteItemResponse = (Message);

export type LoginLoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginTestTokenResponse = (UserPublic);

export type LoginRecoverPasswordData = {
    email: string;
};

export type LoginRecoverPasswordResponse = (Message);

export type LoginResetPasswordData = {
    requestBody: NewPassword;
};

export type LoginResetPasswordResponse = (Message);

export type LoginRecoverPasswordHtmlContentData = {
    email: string;
};

export type LoginRecoverPasswordHtmlContentResponse = (string);

export type OauthGoogleLoginData = {
    requestBody: GoogleAuthRequest;
};

export type OauthGoogleLoginResponse = (GoogleAuthResponse);

export type PlaygroundGetResponse = (unknown);

export type PrivateCreateUserData = {
    requestBody: PrivateUserCreate;
};

export type PrivateCreateUserResponse = (UserPublic);

export type ProfilesReadProfilesData = {
    limit?: number;
    skip?: number;
};

export type ProfilesReadProfilesResponse = (UserProfilesPublic);

export type ProfilesCreateProfileData = {
    requestBody: UserProfileCreate;
};

export type ProfilesCreateProfileResponse = (UserProfilePublic);

export type ProfilesReadMyProfileResponse = (UserProfileWithSites);

export type ProfilesReadProfileData = {
    id: string;
};

export type ProfilesReadProfileResponse = (UserProfilePublic);

export type ProfilesUpdateProfileData = {
    id: string;
    requestBody: UserProfileUpdate;
};

export type ProfilesUpdateProfileResponse = (UserProfilePublic);

export type ProfilesDeleteProfileData = {
    id: string;
};

export type ProfilesDeleteProfileResponse = (Message);

export type ProfilesAssignSiteToProfileData = {
    profileId: string;
    roleInSite?: (string | null);
    siteId: string;
};

export type ProfilesAssignSiteToProfileResponse = (Message);

export type ProfilesRemoveSiteFromProfileData = {
    profileId: string;
    siteId: string;
};

export type ProfilesRemoveSiteFromProfileResponse = (Message);

export type RolesReadRolesData = {
    limit?: number;
    skip?: number;
};

export type RolesReadRolesResponse = (RolesPublic);

export type RolesCreateRoleData = {
    requestBody: RoleCreate;
};

export type RolesCreateRoleResponse = (RolePublic);

export type RolesReadRoleData = {
    id: string;
};

export type RolesReadRoleResponse = (RolePublic);

export type RolesUpdateRoleData = {
    id: string;
    requestBody: RoleUpdate;
};

export type RolesUpdateRoleResponse = (RolePublic);

export type RolesDeleteRoleData = {
    id: string;
};

export type RolesDeleteRoleResponse = (Message);

export type SitesCreateSiteData = {
    requestBody: SiteCreate;
};

export type SitesCreateSiteResponse = (SitePublic);

export type SitesReadSitesData = {
    limit?: number;
    skip?: number;
};

export type SitesReadSitesResponse = (SitesPublic);

export type SitesGetCurrentSiteEndpointResponse = ((SitePublic | null));

export type SitesReadSiteData = {
    siteId: string;
};

export type SitesReadSiteResponse = (SitePublic);

export type SitesUpdateSiteData = {
    requestBody: SiteUpdate;
    siteId: string;
};

export type SitesUpdateSiteResponse = (SitePublic);

export type SitesDeleteSiteData = {
    siteId: string;
};

export type SitesDeleteSiteResponse = ({
    [key: string]: (string);
});

export type UploadUploadFilesData = {
    formData: Body_upload_upload_files;
};

export type UploadUploadFilesResponse = (BaseResponse_list_str__);

export type UserRolesAssignRoleToUserData = {
    roleId: string;
    userId: string;
};

export type UserRolesAssignRoleToUserResponse = (Message);

export type UserRolesRemoveRoleFromUserData = {
    roleId: string;
    userId: string;
};

export type UserRolesRemoveRoleFromUserResponse = (Message);

export type UserRolesGetUserRolesData = {
    userId: string;
};

export type UserRolesGetUserRolesResponse = (unknown);

export type UserRolesCheckUserHasRoleData = {
    roleName: string;
    userId: string;
};

export type UserRolesCheckUserHasRoleResponse = (unknown);

export type UsersReadUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersCreateUserData = {
    requestBody: UserCreate;
};

export type UsersCreateUserResponse = (UserPublic);

export type UsersReadUserMeResponse = (UserPublic);

export type UsersDeleteUserMeResponse = (Message);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserPublic);

export type UsersUpdatePasswordMeData = {
    requestBody: UpdatePassword;
};

export type UsersUpdatePasswordMeResponse = (Message);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserPublic);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserPublic);

export type UsersUpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserResponse = (UserPublic);

export type UsersDeleteUserData = {
    userId: string;
};

export type UsersDeleteUserResponse = (Message);

export type UtilsTestEmailData = {
    emailTo: string;
};

export type UtilsTestEmailResponse = (Message);

export type UtilsHealthCheckResponse = (boolean);