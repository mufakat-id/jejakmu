// This file is auto-generated by @hey-api/openapi-ts

export type BaseResponse_list_str__ = {
    /**
     * HTTP status code (200, 201, 400, 404, etc.)
     */
    code: number;
    /**
     * Human-readable message describing the operation result
     */
    message: string;
    /**
     * The actual response data. Type varies by endpoint. Can be null for update/delete operations.
     */
    data?: (Array<(string)> | null);
};

export type Body_v1_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type Body_v1_upload_cv_file = {
    /**
     * CV file (PDF, DOC, DOCX)
     */
    file: (Blob | File);
};

export type Body_v1_upload_files = {
    /**
     * Multiple files to upload
     */
    files: Array<((Blob | File))>;
};

export type Body_v1_upload_files_to_b2 = {
    /**
     * Multiple files to upload
     */
    files: Array<((Blob | File))>;
};

export type CVCertificationCreate = {
    name: string;
    issuer: string;
    issue_date: string;
    expiration_date?: (string | null);
    credential_id?: (string | null);
    credential_url?: (string | null);
    description?: (string | null);
    display_order?: number;
    user_cv_id: string;
};

export type CVCertificationPublic = {
    name: string;
    issuer: string;
    issue_date: string;
    expiration_date?: (string | null);
    credential_id?: (string | null);
    credential_url?: (string | null);
    description?: (string | null);
    display_order?: number;
    id: string;
    user_cv_id: string;
};

export type CVCertificationUpdate = {
    name?: (string | null);
    issuer?: (string | null);
    issue_date?: (string | null);
    expiration_date?: (string | null);
    credential_id?: (string | null);
    credential_url?: (string | null);
    description?: (string | null);
    display_order?: (number | null);
};

export type CVEducationCreate = {
    institution: string;
    degree: string;
    field_of_study: string;
    start_date: string;
    end_date?: (string | null);
    gpa?: (string | null);
    description?: (string | null);
    city?: (string | null);
    country?: (string | null);
    display_order?: number;
    user_cv_id: string;
};

export type CVEducationPublic = {
    institution: string;
    degree: string;
    field_of_study: string;
    start_date: string;
    end_date?: (string | null);
    gpa?: (string | null);
    description?: (string | null);
    city?: (string | null);
    country?: (string | null);
    display_order?: number;
    id: string;
    user_cv_id: string;
};

export type CVEducationUpdate = {
    institution?: (string | null);
    degree?: (string | null);
    field_of_study?: (string | null);
    start_date?: (string | null);
    end_date?: (string | null);
    gpa?: (string | null);
    description?: (string | null);
    city?: (string | null);
    country?: (string | null);
    display_order?: (number | null);
};

export type CVFilePublic = {
    file_url: string;
    file_name: string;
    file_type: string;
    file_size?: (number | null);
    status?: string;
    review_notes?: (string | null);
    is_primary?: boolean;
    version?: number;
    id: string;
    user_cv_id: string;
    reviewed_by_id?: (string | null);
    reviewed_at?: (string | null);
};

export type CVFilesPublic = {
    data: Array<CVFileWithCVPublic>;
    count: number;
};

export type CVFileUpdate = {
    status?: (string | null);
    review_notes?: (string | null);
    is_primary?: (boolean | null);
    reviewed_by_id?: (string | null);
};

export type CVFileWithCVPublic = {
    file_url: string;
    file_name: string;
    file_type: string;
    file_size?: (number | null);
    status?: string;
    review_notes?: (string | null);
    is_primary?: boolean;
    version?: number;
    id: string;
    user_cv_id: string;
    reviewed_by_id?: (string | null);
    reviewed_at?: (string | null);
    user_cv?: (UserCVPublic | null);
};

export type CVLanguageCreate = {
    language: string;
    proficiency: string;
    certification_name?: (string | null);
    certification_score?: (string | null);
    display_order?: number;
    user_cv_id: string;
};

export type CVLanguagePublic = {
    language: string;
    proficiency: string;
    certification_name?: (string | null);
    certification_score?: (string | null);
    display_order?: number;
    id: string;
    user_cv_id: string;
};

export type CVLanguageUpdate = {
    language?: (string | null);
    proficiency?: (string | null);
    certification_name?: (string | null);
    certification_score?: (string | null);
    display_order?: (number | null);
};

export type CVProjectCreate = {
    name: string;
    description: string;
    start_date?: (string | null);
    end_date?: (string | null);
    project_url?: (string | null);
    repository_url?: (string | null);
    technologies?: (Array<(string)> | null);
    role?: (string | null);
    company?: (string | null);
    display_order?: number;
    user_cv_id: string;
};

export type CVProjectPublic = {
    name: string;
    description: string;
    start_date?: (string | null);
    end_date?: (string | null);
    project_url?: (string | null);
    repository_url?: (string | null);
    technologies?: (Array<(string)> | null);
    role?: (string | null);
    company?: (string | null);
    display_order?: number;
    id: string;
    user_cv_id: string;
};

export type CVProjectUpdate = {
    name?: (string | null);
    description?: (string | null);
    start_date?: (string | null);
    end_date?: (string | null);
    project_url?: (string | null);
    repository_url?: (string | null);
    technologies?: (Array<(string)> | null);
    role?: (string | null);
    company?: (string | null);
    display_order?: (number | null);
};

export type CVSkillCreate = {
    name: string;
    level?: (string | null);
    category?: (string | null);
    years_of_experience?: (number | null);
    display_order?: number;
    user_cv_id: string;
};

export type CVSkillPublic = {
    name: string;
    level?: (string | null);
    category?: (string | null);
    years_of_experience?: (number | null);
    display_order?: number;
    id: string;
    user_cv_id: string;
};

export type CVSkillUpdate = {
    name?: (string | null);
    level?: (string | null);
    category?: (string | null);
    years_of_experience?: (number | null);
    display_order?: (number | null);
};

export type CVWorkExperienceCreate = {
    company: string;
    position: string;
    start_date: string;
    end_date?: (string | null);
    description?: (string | null);
    employment_type?: (string | null);
    city?: (string | null);
    country?: (string | null);
    is_remote?: boolean;
    display_order?: number;
    user_cv_id: string;
};

export type CVWorkExperiencePublic = {
    company: string;
    position: string;
    start_date: string;
    end_date?: (string | null);
    description?: (string | null);
    employment_type?: (string | null);
    city?: (string | null);
    country?: (string | null);
    is_remote?: boolean;
    display_order?: number;
    id: string;
    user_cv_id: string;
};

export type CVWorkExperienceUpdate = {
    company?: (string | null);
    position?: (string | null);
    start_date?: (string | null);
    end_date?: (string | null);
    description?: (string | null);
    employment_type?: (string | null);
    city?: (string | null);
    country?: (string | null);
    is_remote?: (boolean | null);
    display_order?: (number | null);
};

export type GoogleAuthRequest = {
    /**
     * Authorization code from Google OAuth
     */
    code: string;
};

export type GoogleAuthResponse = {
    access_token: string;
    token_type?: string;
    user: UserPublic;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type Message = {
    message: string;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type PrivateUserCreate = {
    email: string;
    password: string;
    full_name: string;
    is_verified?: boolean;
};

export type RoleCreate = {
    /**
     * Role name
     */
    name: string;
    description?: (string | null);
    is_active?: boolean;
};

export type RolePublic = {
    /**
     * Role name
     */
    name: string;
    description?: (string | null);
    is_active?: boolean;
    id: string;
};

export type RolesPublic = {
    data: Array<RolePublic>;
    count: number;
};

export type RoleUpdate = {
    name?: (string | null);
    description?: (string | null);
    is_active?: (boolean | null);
};

/**
 * Schema for creating a new site
 */
export type SiteCreate = {
    /**
     * Backend domain (e.g., api.example.com or localhost:8000)
     */
    domain: string;
    /**
     * Human-readable site name
     */
    name: string;
    /**
     * Frontend domain for redirects (e.g., example.com or localhost:5173)
     */
    frontend_domain: string;
    /**
     * Whether the site is active
     */
    is_active?: boolean;
    /**
     * Whether this is the default site
     */
    is_default?: boolean;
    /**
     * Additional site-specific settings
     */
    settings?: ({
    [key: string]: unknown;
} | null);
};

/**
 * Public schema for Site
 */
export type SitePublic = {
    /**
     * Backend domain (e.g., api.example.com or localhost:8000)
     */
    domain: string;
    /**
     * Human-readable site name
     */
    name: string;
    /**
     * Frontend domain for redirects (e.g., example.com or localhost:5173)
     */
    frontend_domain: string;
    /**
     * Whether the site is active
     */
    is_active?: boolean;
    /**
     * Whether this is the default site
     */
    is_default?: boolean;
    /**
     * Additional site-specific settings
     */
    settings?: ({
    [key: string]: unknown;
} | null);
    id: string;
};

/**
 * Schema for list of sites
 */
export type SitesPublic = {
    data: Array<SitePublic>;
    count: number;
};

/**
 * Schema for updating a site
 */
export type SiteUpdate = {
    domain?: (string | null);
    name?: (string | null);
    frontend_domain?: (string | null);
    is_active?: (boolean | null);
    is_default?: (boolean | null);
    settings?: ({
    [key: string]: unknown;
} | null);
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    full_name?: (string | null);
    password?: (string | null);
    is_superuser?: boolean;
};

export type UserCVCreate = {
    professional_summary?: (string | null);
    linkedin_url?: (string | null);
    github_url?: (string | null);
    portfolio_url?: (string | null);
    user_id: string;
};

export type UserCVFull = {
    professional_summary?: (string | null);
    linkedin_url?: (string | null);
    github_url?: (string | null);
    portfolio_url?: (string | null);
    id: string;
    user_id: string;
    cv_files?: Array<CVFilePublic>;
    education?: Array<CVEducationPublic>;
    work_experience?: Array<CVWorkExperiencePublic>;
    skills?: Array<CVSkillPublic>;
    certifications?: Array<CVCertificationPublic>;
    languages?: Array<CVLanguagePublic>;
    projects?: Array<CVProjectPublic>;
};

export type UserCVPublic = {
    professional_summary?: (string | null);
    linkedin_url?: (string | null);
    github_url?: (string | null);
    portfolio_url?: (string | null);
    id: string;
    user_id: string;
};

export type UserCVsPublic = {
    data: Array<UserCVPublic>;
    count: number;
};

export type UserCVUpdate = {
    professional_summary?: (string | null);
    linkedin_url?: (string | null);
    github_url?: (string | null);
    portfolio_url?: (string | null);
};

export type UserProfileCreate = {
    phone?: (string | null);
    address?: (string | null);
    bio?: (string | null);
    avatar_url?: (string | null);
    date_of_birth?: (string | null);
    city?: (string | null);
    country?: (string | null);
    postal_code?: (string | null);
    user_id: string;
};

export type UserProfilePublic = {
    phone?: (string | null);
    address?: (string | null);
    bio?: (string | null);
    avatar_url?: (string | null);
    date_of_birth?: (string | null);
    city?: (string | null);
    country?: (string | null);
    postal_code?: (string | null);
    id: string;
    user_id: string;
};

export type UserProfilesPublic = {
    data: Array<UserProfilePublic>;
    count: number;
};

export type UserProfileUpdate = {
    phone?: (string | null);
    address?: (string | null);
    bio?: (string | null);
    avatar_url?: (string | null);
    date_of_birth?: (string | null);
    city?: (string | null);
    country?: (string | null);
    postal_code?: (string | null);
};

export type UserProfileWithSites = {
    phone?: (string | null);
    address?: (string | null);
    bio?: (string | null);
    avatar_url?: (string | null);
    date_of_birth?: (string | null);
    city?: (string | null);
    country?: (string | null);
    postal_code?: (string | null);
    id: string;
    user_id: string;
    /**
     * List of associated site IDs
     */
    site_ids?: Array<(string)>;
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    full_name?: (string | null);
    id: string;
    is_superuser: boolean;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: (string | null);
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserUpdate = {
    email?: (string | null);
    is_active?: (boolean | null);
    full_name?: (string | null);
};

export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type V1ReadMyCertificationsResponse = (Array<CVCertificationPublic>);

export type V1CreateCertificationData = {
    requestBody: CVCertificationCreate;
};

export type V1CreateCertificationResponse = (CVCertificationPublic);

export type V1UpdateCertificationData = {
    id: string;
    requestBody: CVCertificationUpdate;
};

export type V1UpdateCertificationResponse = (CVCertificationPublic);

export type V1DeleteCertificationData = {
    id: string;
};

export type V1DeleteCertificationResponse = (Message);

export type V1ReadMyEducationResponse = (Array<CVEducationPublic>);

export type V1CreateEducationData = {
    requestBody: CVEducationCreate;
};

export type V1CreateEducationResponse = (CVEducationPublic);

export type V1UpdateEducationData = {
    id: string;
    requestBody: CVEducationUpdate;
};

export type V1UpdateEducationResponse = (CVEducationPublic);

export type V1DeleteEducationData = {
    id: string;
};

export type V1DeleteEducationResponse = (Message);

export type V1ReadRequestedCvFilesData = {
    limit?: number;
    skip?: number;
};

export type V1ReadRequestedCvFilesResponse = (CVFilesPublic);

export type V1UploadCvFileData = {
    formData: Body_v1_upload_cv_file;
};

export type V1UploadCvFileResponse = (CVFilePublic);

export type V1ReadMyCvFilesResponse = (Array<CVFilePublic>);

export type V1UpdateCvFileData = {
    id: string;
    requestBody: CVFileUpdate;
};

export type V1UpdateCvFileResponse = (CVFilePublic);

export type V1DeleteCvFileData = {
    id: string;
};

export type V1DeleteCvFileResponse = (Message);

export type V1ReadMyLanguagesResponse = (Array<CVLanguagePublic>);

export type V1CreateLanguageData = {
    requestBody: CVLanguageCreate;
};

export type V1CreateLanguageResponse = (CVLanguagePublic);

export type V1UpdateLanguageData = {
    id: string;
    requestBody: CVLanguageUpdate;
};

export type V1UpdateLanguageResponse = (CVLanguagePublic);

export type V1DeleteLanguageData = {
    id: string;
};

export type V1DeleteLanguageResponse = (Message);

export type V1ReadMyProjectsResponse = (Array<CVProjectPublic>);

export type V1CreateProjectData = {
    requestBody: CVProjectCreate;
};

export type V1CreateProjectResponse = (CVProjectPublic);

export type V1UpdateProjectData = {
    id: string;
    requestBody: CVProjectUpdate;
};

export type V1UpdateProjectResponse = (CVProjectPublic);

export type V1DeleteProjectData = {
    id: string;
};

export type V1DeleteProjectResponse = (Message);

export type V1ReadMySkillsResponse = (Array<CVSkillPublic>);

export type V1CreateSkillData = {
    requestBody: CVSkillCreate;
};

export type V1CreateSkillResponse = (CVSkillPublic);

export type V1UpdateSkillData = {
    id: string;
    requestBody: CVSkillUpdate;
};

export type V1UpdateSkillResponse = (CVSkillPublic);

export type V1DeleteSkillData = {
    id: string;
};

export type V1DeleteSkillResponse = (Message);

export type V1ReadMyWorkExperienceResponse = (Array<CVWorkExperiencePublic>);

export type V1CreateWorkExperienceData = {
    requestBody: CVWorkExperienceCreate;
};

export type V1CreateWorkExperienceResponse = (CVWorkExperiencePublic);

export type V1UpdateWorkExperienceData = {
    id: string;
    requestBody: CVWorkExperienceUpdate;
};

export type V1UpdateWorkExperienceResponse = (CVWorkExperiencePublic);

export type V1DeleteWorkExperienceData = {
    id: string;
};

export type V1DeleteWorkExperienceResponse = (Message);

export type V1GetSignedUrlData = {
    /**
     * Number of days until the signed URL expires
     */
    expirationDays?: number;
    /**
     * Public GCS URL to convert to signed URL
     */
    url: string;
};

export type V1GetB2SignedUrlData = {
    /**
     * Number of hours until the presigned URL expires
     */
    expirationHours?: number;
    /**
     * Public B2 URL to convert to presigned URL
     */
    url: string;
};

export type V1LoginAccessTokenData = {
    formData: Body_v1_login_access_token;
};

export type V1LoginAccessTokenResponse = (Token);

export type V1TestTokenResponse = (UserPublic);

export type V1RecoverPasswordData = {
    email: string;
};

export type V1RecoverPasswordResponse = (Message);

export type V1ResetPasswordData = {
    requestBody: NewPassword;
};

export type V1ResetPasswordResponse = (Message);

export type V1RecoverPasswordHtmlContentData = {
    email: string;
};

export type V1RecoverPasswordHtmlContentResponse = (string);

export type V1GoogleLoginData = {
    requestBody: GoogleAuthRequest;
};

export type V1GoogleLoginResponse = (GoogleAuthResponse);

export type V1CreateUserData = {
    requestBody: PrivateUserCreate;
};

export type V1CreateUserResponse = (UserPublic);

export type V1ReadProfilesData = {
    limit?: number;
    skip?: number;
};

export type V1ReadProfilesResponse = (UserProfilesPublic);

export type V1CreateProfileData = {
    requestBody: UserProfileCreate;
};

export type V1CreateProfileResponse = (UserProfilePublic);

export type V1ReadMyProfileResponse = (UserProfileWithSites);

export type V1ReadProfileData = {
    id: string;
};

export type V1ReadProfileResponse = (UserProfilePublic);

export type V1UpdateProfileData = {
    id: string;
    requestBody: UserProfileUpdate;
};

export type V1UpdateProfileResponse = (UserProfilePublic);

export type V1DeleteProfileData = {
    id: string;
};

export type V1DeleteProfileResponse = (Message);

export type V1AssignSiteToProfileData = {
    profileId: string;
    roleInSite?: (string | null);
    siteId: string;
};

export type V1AssignSiteToProfileResponse = (Message);

export type V1RemoveSiteFromProfileData = {
    profileId: string;
    siteId: string;
};

export type V1RemoveSiteFromProfileResponse = (Message);

export type V1ReadRolesData = {
    limit?: number;
    skip?: number;
};

export type V1ReadRolesResponse = (RolesPublic);

export type V1CreateRoleData = {
    requestBody: RoleCreate;
};

export type V1CreateRoleResponse = (RolePublic);

export type V1ReadRoleData = {
    id: string;
};

export type V1ReadRoleResponse = (RolePublic);

export type V1UpdateRoleData = {
    id: string;
    requestBody: RoleUpdate;
};

export type V1UpdateRoleResponse = (RolePublic);

export type V1DeleteRoleData = {
    id: string;
};

export type V1DeleteRoleResponse = (Message);

export type SandboxGetResponse = (unknown);

export type SandboxGetProfileResponse = (unknown);

export type V1CreateSiteData = {
    requestBody: SiteCreate;
};

export type V1CreateSiteResponse = (SitePublic);

export type V1ReadSitesData = {
    limit?: number;
    skip?: number;
};

export type V1ReadSitesResponse = (SitesPublic);

export type V1GetCurrentSiteEndpointResponse = ((SitePublic | null));

export type V1ReadSiteData = {
    siteId: string;
};

export type V1ReadSiteResponse = (SitePublic);

export type V1UpdateSiteData = {
    requestBody: SiteUpdate;
    siteId: string;
};

export type V1UpdateSiteResponse = (SitePublic);

export type V1DeleteSiteData = {
    siteId: string;
};

export type V1DeleteSiteResponse = ({
    [key: string]: (string);
});

export type V1UploadFilesData = {
    formData: Body_v1_upload_files;
};

export type V1UploadFilesResponse = (BaseResponse_list_str__);

export type V1UploadFilesToB2Data = {
    formData: Body_v1_upload_files_to_b2;
};

export type V1UploadFilesToB2Response = (BaseResponse_list_str__);

export type V1ReadListCvData = {
    limit?: number;
    skip?: number;
};

export type V1ReadListCvResponse = (UserCVsPublic);

export type V1CreateCvData = {
    requestBody: UserCVCreate;
};

export type V1CreateCvResponse = (UserCVPublic);

export type V1ReadMyCvResponse = (UserCVFull);

export type V1AssignRoleToUserData = {
    roleId: string;
    userId: string;
};

export type V1AssignRoleToUserResponse = (Message);

export type V1RemoveRoleFromUserData = {
    roleId: string;
    userId: string;
};

export type V1RemoveRoleFromUserResponse = (Message);

export type V1GetUserRolesData = {
    userId: string;
};

export type V1GetUserRolesResponse = (unknown);

export type V1CheckUserHasRoleData = {
    roleName: string;
    userId: string;
};

export type V1CheckUserHasRoleResponse = (unknown);

export type V1ReadUsersData = {
    limit?: number;
    skip?: number;
};

export type V1ReadUsersResponse = (UsersPublic);

export type V1ReadUserMeResponse = (UserPublic);

export type V1DeleteUserMeResponse = (Message);

export type V1UpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type V1UpdateUserMeResponse = (UserPublic);

export type V1UpdatePasswordMeData = {
    requestBody: UpdatePassword;
};

export type V1UpdatePasswordMeResponse = (Message);

export type V1RegisterUserData = {
    requestBody: UserRegister;
};

export type V1RegisterUserResponse = (UserPublic);

export type V1ReadUserByIdData = {
    userId: string;
};

export type V1ReadUserByIdResponse = (UserPublic);

export type V1UpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type V1UpdateUserResponse = (UserPublic);

export type V1DeleteUserData = {
    userId: string;
};

export type V1DeleteUserResponse = (Message);

export type V1TestEmailData = {
    emailTo: string;
};

export type V1TestEmailResponse = (Message);

export type V1HealthCheckResponse = (boolean);

export type V1ReadCvData = {
    id: string;
};

export type V1ReadCvResponse = (UserCVPublic);

export type V1UpdateCvData = {
    id: string;
    requestBody: UserCVUpdate;
};

export type V1UpdateCvResponse = (UserCVPublic);

export type V1DeleteCvData = {
    id: string;
};

export type V1DeleteCvResponse = (Message);

export type V1CreateUser1Data = {
    requestBody: PrivateUserCreate;
};

export type V1CreateUser1Response = (UserPublic);