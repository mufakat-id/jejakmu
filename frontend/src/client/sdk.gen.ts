// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { FileGetSignedUrlData, ItemsReadItemsData, ItemsReadItemsResponse, ItemsCreateItemData, ItemsCreateItemResponse, ItemsReadItemData, ItemsReadItemResponse, ItemsUpdateItemData, ItemsUpdateItemResponse, ItemsDeleteItemData, ItemsDeleteItemResponse, LoginLoginAccessTokenData, LoginLoginAccessTokenResponse, LoginTestTokenResponse, LoginRecoverPasswordData, LoginRecoverPasswordResponse, LoginResetPasswordData, LoginResetPasswordResponse, LoginRecoverPasswordHtmlContentData, LoginRecoverPasswordHtmlContentResponse, OauthGoogleLoginData, OauthGoogleLoginResponse, PlaygroundGetResponse, PrivateCreateUserData, PrivateCreateUserResponse, ProfilesReadProfilesData, ProfilesReadProfilesResponse, ProfilesCreateProfileData, ProfilesCreateProfileResponse, ProfilesReadMyProfileResponse, ProfilesReadProfileData, ProfilesReadProfileResponse, ProfilesUpdateProfileData, ProfilesUpdateProfileResponse, ProfilesDeleteProfileData, ProfilesDeleteProfileResponse, ProfilesAssignSiteToProfileData, ProfilesAssignSiteToProfileResponse, ProfilesRemoveSiteFromProfileData, ProfilesRemoveSiteFromProfileResponse, RolesReadRolesData, RolesReadRolesResponse, RolesCreateRoleData, RolesCreateRoleResponse, RolesReadRoleData, RolesReadRoleResponse, RolesUpdateRoleData, RolesUpdateRoleResponse, RolesDeleteRoleData, RolesDeleteRoleResponse, SitesCreateSiteData, SitesCreateSiteResponse, SitesReadSitesData, SitesReadSitesResponse, SitesGetCurrentSiteEndpointResponse, SitesReadSiteData, SitesReadSiteResponse, SitesUpdateSiteData, SitesUpdateSiteResponse, SitesDeleteSiteData, SitesDeleteSiteResponse, UploadUploadFilesData, UploadUploadFilesResponse, UserRolesAssignRoleToUserData, UserRolesAssignRoleToUserResponse, UserRolesRemoveRoleFromUserData, UserRolesRemoveRoleFromUserResponse, UserRolesGetUserRolesData, UserRolesGetUserRolesResponse, UserRolesCheckUserHasRoleData, UserRolesCheckUserHasRoleResponse, UsersReadUsersData, UsersReadUsersResponse, UsersCreateUserData, UsersCreateUserResponse, UsersReadUserMeResponse, UsersDeleteUserMeResponse, UsersUpdateUserMeData, UsersUpdateUserMeResponse, UsersUpdatePasswordMeData, UsersUpdatePasswordMeResponse, UsersRegisterUserData, UsersRegisterUserResponse, UsersReadUserByIdData, UsersReadUserByIdResponse, UsersUpdateUserData, UsersUpdateUserResponse, UsersDeleteUserData, UsersDeleteUserResponse, UtilsTestEmailData, UtilsTestEmailResponse, UtilsHealthCheckResponse } from './types.gen';

export class FileService {
    /**
     * Get Signed Url
     * Convert a public GCS URL to a signed URL and redirect to it.
     *
     * **Parameters:**
     * - url: Public GCS URL (e.g., https://storage.googleapis.com/bucket/path/file.jpg)
     * - expiration_days: Number of days until the signed URL expires (default: 7, max: 365)
     *
     * **Returns:**
     * - Redirects to the signed URL that can be accessed without authentication
     * @param data The data for the request.
     * @param data.url Public GCS URL to convert to signed URL
     * @param data.expirationDays Number of days until the signed URL expires
     * @throws ApiError
     */
    public static getSignedUrl(data: FileGetSignedUrlData): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/file/signed-url/',
            query: {
                url: data.url,
                expiration_days: data.expirationDays
            },
            errors: {
                307: 'Successful Response',
                422: 'Validation Error'
            }
        });
    }
}

export class ItemsService {
    /**
     * Read Items
     * Retrieve items.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns ItemsPublic Successful Response
     * @throws ApiError
     */
    public static readItems(data: ItemsReadItemsData = {}): CancelablePromise<ItemsReadItemsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/items/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Item
     * Create new item.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static createItem(data: ItemsCreateItemData): CancelablePromise<ItemsCreateItemResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/items/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Item
     * Get item by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static readItem(data: ItemsReadItemData): CancelablePromise<ItemsReadItemResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Item
     * Update an item.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static updateItem(data: ItemsUpdateItemData): CancelablePromise<ItemsUpdateItemResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Item
     * Delete an item.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteItem(data: ItemsDeleteItemData): CancelablePromise<ItemsDeleteItemResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class LoginService {
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static loginAccessToken(data: LoginLoginAccessTokenData): CancelablePromise<LoginLoginAccessTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/access-token',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Test Token
     * Test access token
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static testToken(): CancelablePromise<LoginTestTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/test-token'
        });
    }
    
    /**
     * Recover Password
     * Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static recoverPassword(data: LoginRecoverPasswordData): CancelablePromise<LoginRecoverPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reset Password
     * Reset password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static resetPassword(data: LoginResetPasswordData): CancelablePromise<LoginResetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/reset-password/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Recover Password Html Content
     * HTML Content for Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns string Successful Response
     * @throws ApiError
     */
    public static recoverPasswordHtmlContent(data: LoginRecoverPasswordHtmlContentData): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery-html-content/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class OauthService {
    /**
     * Google Login
     * Google OAuth Login
     *
     * Exchange Google authorization code for access token.
     * This endpoint will:
     * 1. Validate the Google authorization code
     * 2. Get user info from Google
     * 3. Link Google account to existing user (user must exist in database)
     * 4. Return access token for the user
     *
     * Note: User must already exist in the database (created via regular signup).
     * This endpoint only links Google account to existing users.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns GoogleAuthResponse Successful Response
     * @throws ApiError
     */
    public static googleLogin(data: OauthGoogleLoginData): CancelablePromise<OauthGoogleLoginResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/oauth/google',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class PlaygroundService {
    /**
     * Get
     * WebSocket testing playground - HTML interface for testing WebSocket connections with authentication
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static get(): CancelablePromise<PlaygroundGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/playground/'
        });
    }
}

export class PrivateService {
    /**
     * Create User
     * Create a new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: PrivateCreateUserData): CancelablePromise<PrivateCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/private/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class ProfilesService {
    /**
     * Read Profiles
     * Retrieve all profiles.
     *
     * Only superusers can list all profiles.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns UserProfilesPublic Successful Response
     * @throws ApiError
     */
    public static readProfiles(data: ProfilesReadProfilesData = {}): CancelablePromise<ProfilesReadProfilesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/profiles/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Profile
     * Create new profile.
     *
     * Users can only create their own profile.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserProfilePublic Successful Response
     * @throws ApiError
     */
    public static createProfile(data: ProfilesCreateProfileData): CancelablePromise<ProfilesCreateProfileResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/profiles/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read My Profile
     * Get current user's profile with associated sites.
     * @returns UserProfileWithSites Successful Response
     * @throws ApiError
     */
    public static readMyProfile(): CancelablePromise<ProfilesReadMyProfileResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/profiles/me'
        });
    }
    
    /**
     * Read Profile
     * Get profile by ID.
     *
     * Users can only view their own profile unless they are superusers.
     * @param data The data for the request.
     * @param data.id
     * @returns UserProfilePublic Successful Response
     * @throws ApiError
     */
    public static readProfile(data: ProfilesReadProfileData): CancelablePromise<ProfilesReadProfileResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/profiles/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Profile
     * Update a profile.
     *
     * Users can only update their own profile.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns UserProfilePublic Successful Response
     * @throws ApiError
     */
    public static updateProfile(data: ProfilesUpdateProfileData): CancelablePromise<ProfilesUpdateProfileResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/profiles/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Profile
     * Delete a profile.
     *
     * Users can only delete their own profile.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteProfile(data: ProfilesDeleteProfileData): CancelablePromise<ProfilesDeleteProfileResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/profiles/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Assign Site To Profile
     * Assign a site to a profile.
     *
     * Users can only assign sites to their own profile unless they are superusers.
     * @param data The data for the request.
     * @param data.profileId
     * @param data.siteId
     * @param data.roleInSite
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static assignSiteToProfile(data: ProfilesAssignSiteToProfileData): CancelablePromise<ProfilesAssignSiteToProfileResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/profiles/{profile_id}/sites/{site_id}',
            path: {
                profile_id: data.profileId,
                site_id: data.siteId
            },
            query: {
                role_in_site: data.roleInSite
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Remove Site From Profile
     * Remove a site from a profile.
     *
     * Users can only remove sites from their own profile unless they are superusers.
     * @param data The data for the request.
     * @param data.profileId
     * @param data.siteId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static removeSiteFromProfile(data: ProfilesRemoveSiteFromProfileData): CancelablePromise<ProfilesRemoveSiteFromProfileResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/profiles/{profile_id}/sites/{site_id}',
            path: {
                profile_id: data.profileId,
                site_id: data.siteId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class RolesService {
    /**
     * Read Roles
     * Retrieve all roles.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns RolesPublic Successful Response
     * @throws ApiError
     */
    public static readRoles(data: RolesReadRolesData = {}): CancelablePromise<RolesReadRolesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/roles/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Role
     * Create new role.
     *
     * Only superusers can create roles.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns RolePublic Successful Response
     * @throws ApiError
     */
    public static createRole(data: RolesCreateRoleData): CancelablePromise<RolesCreateRoleResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/roles/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Role
     * Get role by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns RolePublic Successful Response
     * @throws ApiError
     */
    public static readRole(data: RolesReadRoleData): CancelablePromise<RolesReadRoleResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/roles/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Role
     * Update a role.
     *
     * Only superusers can update roles.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns RolePublic Successful Response
     * @throws ApiError
     */
    public static updateRole(data: RolesUpdateRoleData): CancelablePromise<RolesUpdateRoleResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/roles/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Role
     * Delete a role.
     *
     * Only superusers can delete roles.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteRole(data: RolesDeleteRoleData): CancelablePromise<RolesDeleteRoleResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/roles/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class SitesService {
    /**
     * Create Site
     * Create new site. Only for superusers.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns SitePublic Successful Response
     * @throws ApiError
     */
    public static createSite(data: SitesCreateSiteData): CancelablePromise<SitesCreateSiteResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/sites/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Sites
     * Retrieve sites. Only for superusers.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns SitesPublic Successful Response
     * @throws ApiError
     */
    public static readSites(data: SitesReadSitesData = {}): CancelablePromise<SitesReadSitesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/sites/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Current Site Endpoint
     * Get the current site based on request host.
     * This endpoint is public to allow frontend to know which site they're on.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getCurrentSiteEndpoint(): CancelablePromise<SitesGetCurrentSiteEndpointResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/sites/current'
        });
    }
    
    /**
     * Read Site
     * Get site by ID. Only for superusers.
     * @param data The data for the request.
     * @param data.siteId
     * @returns SitePublic Successful Response
     * @throws ApiError
     */
    public static readSite(data: SitesReadSiteData): CancelablePromise<SitesReadSiteResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/sites/{site_id}',
            path: {
                site_id: data.siteId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Site
     * Update a site. Only for superusers.
     * @param data The data for the request.
     * @param data.siteId
     * @param data.requestBody
     * @returns SitePublic Successful Response
     * @throws ApiError
     */
    public static updateSite(data: SitesUpdateSiteData): CancelablePromise<SitesUpdateSiteResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/sites/{site_id}',
            path: {
                site_id: data.siteId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Site
     * Delete a site. Only for superusers.
     * @param data The data for the request.
     * @param data.siteId
     * @returns string Successful Response
     * @throws ApiError
     */
    public static deleteSite(data: SitesDeleteSiteData): CancelablePromise<SitesDeleteSiteResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/sites/{site_id}',
            path: {
                site_id: data.siteId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class UploadService {
    /**
     * Upload Files
     * Upload multiple files to Google Cloud Storage.
     *
     * **Parameters:**
     * - files: List of files to upload
     *
     * **Returns:**
     * - List of URLs for the uploaded files
     *
     * **Example Response:**
     * ```json
     * {
     * "code": 201,
     * "message": "Files uploaded successfully",
     * "data": [
     * "https://storage.googleapis.com/bucket-name/file1.pdf",
     * "https://storage.googleapis.com/bucket-name/file2.jpg"
     * ]
     * }
     * ```
     * @param data The data for the request.
     * @param data.formData
     * @returns BaseResponse_list_str__ Successful Response
     * @throws ApiError
     */
    public static uploadFiles(data: UploadUploadFilesData): CancelablePromise<UploadUploadFilesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/upload/',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class UserRolesService {
    /**
     * Assign Role To User
     * Assign a role to a user.
     *
     * Users can only assign roles to themselves unless they are superusers.
     * @param data The data for the request.
     * @param data.userId
     * @param data.roleId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static assignRoleToUser(data: UserRolesAssignRoleToUserData): CancelablePromise<UserRolesAssignRoleToUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/{user_id}/roles/{role_id}',
            path: {
                user_id: data.userId,
                role_id: data.roleId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Remove Role From User
     * Remove a role from a user.
     *
     * Users can only remove roles from themselves unless they are superusers.
     * @param data The data for the request.
     * @param data.userId
     * @param data.roleId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static removeRoleFromUser(data: UserRolesRemoveRoleFromUserData): CancelablePromise<UserRolesRemoveRoleFromUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/{user_id}/roles/{role_id}',
            path: {
                user_id: data.userId,
                role_id: data.roleId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get User Roles
     * Get all roles for a specific user.
     *
     * Users can only view their own roles unless they are superusers.
     * @param data The data for the request.
     * @param data.userId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getUserRoles(data: UserRolesGetUserRolesData): CancelablePromise<UserRolesGetUserRolesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/{user_id}/roles',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Check User Has Role
     * Check if user has a specific role.
     * @param data The data for the request.
     * @param data.userId
     * @param data.roleName
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static checkUserHasRole(data: UserRolesCheckUserHasRoleData): CancelablePromise<UserRolesCheckUserHasRoleResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/{user_id}/roles/{role_name}/check',
            path: {
                user_id: data.userId,
                role_name: data.roleName
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class UsersService {
    /**
     * Read Users
     * Retrieve users.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns UsersPublic Successful Response
     * @throws ApiError
     */
    public static readUsers(data: UsersReadUsersData = {}): CancelablePromise<UsersReadUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create User
     * Create new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: UsersCreateUserData): CancelablePromise<UsersCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User Me
     * Get current user.
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Delete User Me
     * Delete own user.
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Update User Me
     * Update own user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUserMe(data: UsersUpdateUserMeData): CancelablePromise<UsersUpdateUserMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Password Me
     * Update own password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static updatePasswordMe(data: UsersUpdatePasswordMeData): CancelablePromise<UsersUpdatePasswordMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me/password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Register User
     * Create new user without the need to be logged in.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static registerUser(data: UsersRegisterUserData): CancelablePromise<UsersRegisterUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/signup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User By Id
     * Get a specific user by id.
     * @param data The data for the request.
     * @param data.userId
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserById(data: UsersReadUserByIdData): CancelablePromise<UsersReadUserByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User
     * Update a user.
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUser(data: UsersUpdateUserData): CancelablePromise<UsersUpdateUserResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User
     * Delete a user.
     * @param data The data for the request.
     * @param data.userId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUser(data: UsersDeleteUserData): CancelablePromise<UsersDeleteUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class UtilsService {
    /**
     * Test Email
     * Test emails.
     * @param data The data for the request.
     * @param data.emailTo
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static testEmail(data: UtilsTestEmailData): CancelablePromise<UtilsTestEmailResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/test-email/',
            query: {
                email_to: data.emailTo
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Health Check
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/health-check/'
        });
    }
}